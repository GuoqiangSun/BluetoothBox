package com.bazooka.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bazooka.bluetoothbox.cache.db.entity.LedFlashInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LED_FLASH_INFO".
*/
public class LedFlashInfoDao extends AbstractDao<LedFlashInfo, Long> {

    public static final String TABLENAME = "LED_FLASH_INFO";

    /**
     * Properties of entity LedFlashInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FlashId = new Property(1, Long.class, "flashId", false, "FLASH_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Index = new Property(3, int.class, "index", false, "INDEX");
        public final static Property Color1 = new Property(4, int.class, "color1", false, "COLOR1");
        public final static Property Color2 = new Property(5, int.class, "color2", false, "COLOR2");
        public final static Property RepeatTime = new Property(6, int.class, "repeatTime", false, "REPEAT_TIME");
        public final static Property OnTime = new Property(7, int.class, "onTime", false, "ON_TIME");
        public final static Property Bright = new Property(8, int.class, "bright", false, "BRIGHT");
        public final static Property OffTime = new Property(9, int.class, "offTime", false, "OFF_TIME");
    }


    public LedFlashInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LedFlashInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LED_FLASH_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FLASH_ID\" INTEGER," + // 1: flashId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"INDEX\" INTEGER NOT NULL ," + // 3: index
                "\"COLOR1\" INTEGER NOT NULL ," + // 4: color1
                "\"COLOR2\" INTEGER NOT NULL ," + // 5: color2
                "\"REPEAT_TIME\" INTEGER NOT NULL ," + // 6: repeatTime
                "\"ON_TIME\" INTEGER NOT NULL ," + // 7: onTime
                "\"BRIGHT\" INTEGER NOT NULL ," + // 8: bright
                "\"OFF_TIME\" INTEGER NOT NULL );"); // 9: offTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LED_FLASH_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LedFlashInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long flashId = entity.getFlashId();
        if (flashId != null) {
            stmt.bindLong(2, flashId);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getIndex());
        stmt.bindLong(5, entity.getColor1());
        stmt.bindLong(6, entity.getColor2());
        stmt.bindLong(7, entity.getRepeatTime());
        stmt.bindLong(8, entity.getOnTime());
        stmt.bindLong(9, entity.getBright());
        stmt.bindLong(10, entity.getOffTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LedFlashInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long flashId = entity.getFlashId();
        if (flashId != null) {
            stmt.bindLong(2, flashId);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getIndex());
        stmt.bindLong(5, entity.getColor1());
        stmt.bindLong(6, entity.getColor2());
        stmt.bindLong(7, entity.getRepeatTime());
        stmt.bindLong(8, entity.getOnTime());
        stmt.bindLong(9, entity.getBright());
        stmt.bindLong(10, entity.getOffTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LedFlashInfo readEntity(Cursor cursor, int offset) {
        LedFlashInfo entity = new LedFlashInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // flashId
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // index
            cursor.getInt(offset + 4), // color1
            cursor.getInt(offset + 5), // color2
            cursor.getInt(offset + 6), // repeatTime
            cursor.getInt(offset + 7), // onTime
            cursor.getInt(offset + 8), // bright
            cursor.getInt(offset + 9) // offTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LedFlashInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFlashId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setIndex(cursor.getInt(offset + 3));
        entity.setColor1(cursor.getInt(offset + 4));
        entity.setColor2(cursor.getInt(offset + 5));
        entity.setRepeatTime(cursor.getInt(offset + 6));
        entity.setOnTime(cursor.getInt(offset + 7));
        entity.setBright(cursor.getInt(offset + 8));
        entity.setOffTime(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LedFlashInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LedFlashInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LedFlashInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
